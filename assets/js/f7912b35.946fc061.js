"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3501],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),h=c(n),d=r,m=h["".concat(l,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(m,s(s({ref:e},p),{},{components:n})):a.createElement(m,s({ref:e},p))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,s=new Array(o);s[0]=h;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2186:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const o={},s="Scripting",i={unversionedId:"cairo-1/interacting-with-starknet/scripting",id:"cairo-1/interacting-with-starknet/scripting",title:"Scripting",description:"In order to automate a process that includes Protostar operations, you may want to build a script in the language of your",source:"@site/docs/cairo-1/07-interacting-with-starknet/08-scripting.md",sourceDirName:"cairo-1/07-interacting-with-starknet",slug:"/cairo-1/interacting-with-starknet/scripting",permalink:"/protostar/docs/cairo-1/interacting-with-starknet/scripting",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/07-interacting-with-starknet/08-scripting.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"cairo1",previous:{title:"Signing",permalink:"/protostar/docs/cairo-1/interacting-with-starknet/signing"},next:{title:"Compilation",permalink:"/protostar/docs/cairo-1/interacting-with-starknet/compiling"}},l={},c=[{value:"File Structure",id:"file-structure",level:3},{value:"The contract",id:"the-contract",level:4},{value:"protostar.toml file",id:"protostartoml-file",level:4},{value:"Bash script",id:"bash-script",level:3},{value:"Set up the script",id:"set-up-the-script",level:4},{value:"Make sure the contract is correct",id:"make-sure-the-contract-is-correct",level:4},{value:"Declare and deploy the contract",id:"declare-and-deploy-the-contract",level:4},{value:"Call the contract",id:"call-the-contract",level:4},{value:"Python script",id:"python-script",level:3}],p={toc:c};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"scripting"},"Scripting"),(0,r.kt)("p",null,"In order to automate a process that includes Protostar operations, you may want to build a script in the language of your\nchoice."),(0,r.kt)("p",null,"This tutorial shows a simple example of how to do such a thing using scripting in bash."),(0,r.kt)("p",null,"We are going to write a script that builds, tests, declares, deploys, and, in the end, calls the contract. We are also\ngoing to make use of the Protostar's structured output, so we can use previous' commands outputs in the following ones."),(0,r.kt)("h3",{id:"file-structure"},"File Structure"),(0,r.kt)("p",null,"First, let's create a basic Protostar file structure. You can generate it by\ncalling ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/project-initialization"},(0,r.kt)("inlineCode",{parentName:"a"},"protostar init")),". It looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"my_project/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 business_logic/\n\u2502   \u2502   \u2514\u2500\u2500 utils.cairo\n\u2502   \u251c\u2500\u2500 contract/\n\u2502   \u2502   \u2514\u2500\u2500 hello_starknet.cairo\n\u2502   \u251c\u2500\u2500 business_logic.cairo\n\u2502   \u251c\u2500\u2500 contract.cairo\n\u2502   \u2514\u2500\u2500 lib.cairo\n\u2514\u2500\u2500 Scarb.toml\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 test_hello_starknet.cairo\n\u2502   \u2514\u2500\u2500 test_utils.cairo\n\u2514\u2500\u2500 protostar.toml\n")),(0,r.kt)("h4",{id:"the-contract"},"The contract"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"protostar init")," automatically fills generated files with sample content. We're not going to change them because the\nexample contract is sufficient for us, and it is not important for this tutorial what it does exactly."),(0,r.kt)("h4",{id:"protostartoml-file"},"protostar.toml file"),(0,r.kt)("p",null,"You can read about how to compose the Protostar configuration file ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/protostar-toml"},"here"),". The point is to keep\nProtostar commands clean and simple and leave such things as the network configuration away from them."),(0,r.kt)("p",null,"In this file, you should create the following sections:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"declare")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deploy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"call"))),(0,r.kt)("p",null,"In these sections, you can specify properties like ",(0,r.kt)("inlineCode",{parentName:"p"},"network"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"account-address"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"private-key-path"),"."),(0,r.kt)("h3",{id:"bash-script"},"Bash script"),(0,r.kt)("h4",{id:"set-up-the-script"},"Set up the script"),(0,r.kt)("p",null,"Let's start with something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},"#!/bin/bash\n\nset -e\n")),(0,r.kt)("p",null,"The first line informs the system which interpreter should be used to run the script."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"set -e")," instruction tells the interpreter to exit the script immediately if any command returns a non-zero status.\nThis is good for us because we don't want to run the following instructions if one of them fails, for example, we do not\nwant to deploy a contract if the tests for this contract failed."),(0,r.kt)("h4",{id:"make-sure-the-contract-is-correct"},"Make sure the contract is correct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},"protostar build\nprotostar test\n")),(0,r.kt)("p",null,"These two instructions ensure that the contract builds properly and all tests pass."),(0,r.kt)("h4",{id:"declare-and-deploy-the-contract"},"Declare and deploy the contract"),(0,r.kt)("p",null,"Now, we need to first ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/interacting-with-starknet/declare"},"declare")," the contract and then ",(0,r.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/interacting-with-starknet/deploy"},"deploy")," it."),(0,r.kt)("p",null,"Normally, we would start with something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"protostar declare hello_starknet\n")),(0,r.kt)("p",null,"But the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," command needs the contract's class hash that comes from the ",(0,r.kt)("inlineCode",{parentName:"p"},"declare")," command output. Therefore,\nwe need to get this output in a standardized way. That's when the ",(0,r.kt)("inlineCode",{parentName:"p"},"--json")," flag comes into play."),(0,r.kt)("p",null,"By doing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"protostar declare hello_starknet --json\n")),(0,r.kt)("p",null,"we get an output like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "class_hash": "0x07a70656b5612a2f87bd98af477c0be5fa2113d13fe1069e55ad326a3e6f4fe6",\n  "transaction_hash": "0x01f6a2c391d1bd0a51322ba73037ada20e0b30da8232bb86028f813a0d4c1fdb"\n} \n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--json")," output is, in fact, formatted in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ndjson/ndjson-spec"},"NDJSON"),", but here we operate on\ncommands that return a single message, therefore, we can treat them as JSONs.")),(0,r.kt)("p",null,"Now, we can parse the json and pull all the desired information from it easily as json is a format that is widely\nsupported."),(0,r.kt)("p",null,"We could do something like this in our bash script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},"OUTPUT=$(protostar declare hello_starknet --json)\nCLASS_HASH=$(python -c \"import sys, json; print(json.loads(sys.argv[1])['class_hash'])\" $OUTPUT)\nprotostar deploy $CLASS_HASH --inputs 100\n")),(0,r.kt)("p",null,"You can use any alternative to python that will parse the json for you. This is how it would work\nwith ",(0,r.kt)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"jq"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},'OUTPUT=$(protostar declare hello_starknet --json)\nCLASS_HASH=$(echo $OUTPUT | jq -r ".class_hash")\nprotostar deploy $CLASS_HASH --inputs 100\n')),(0,r.kt)("h4",{id:"call-the-contract"},"Call the contract"),(0,r.kt)("p",null,"Now, let's say we want to call our contract. In this case, we need the contract address that is being returned from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," command call."),(0,r.kt)("p",null,"We are basically going to do the same thing as previously to pass the contract address from ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"call"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},"OUT=$(protostar deploy $CLASS_HASH --inputs 100 --json)\nCONTRACT_ADDRESS=$(python -c \"import sys, json; print(json.loads(sys.argv[1])['contract_address'])\" $OUT)\nprotostar call --contract-address $CONTRACT_ADDRESS --function get_balance\n")),(0,r.kt)("p",null,"In the end, our bash script looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell",metastring:'title="automate_protostar_operations.sh"',title:'"automate_protostar_operations.sh"'},"#!/bin/bash\n\nset -e\n\nprotostar build\nprotostar test\n\nDECLARE_OUTPUT=$(protostar declare hello_starknet --json)\nCLASS_HASH=$(python -c \"import sys, json; print(json.loads(sys.argv[1])['class_hash'])\" $DECLARE_OUTPUT)\n\nDEPLOY_OUTPUT=$(protostar deploy $CLASS_HASH --inputs 100 --json)\nCONTRACT_ADDRESS=$(python -c \"import sys, json; print(json.loads(sys.argv[1])['contract_address'])\" $DEPLOY_OUTPUT)\nprotostar call --contract-address $CONTRACT_ADDRESS --function get_balance\n")),(0,r.kt)("p",null,"Of course, we could exclude pulling a specific field from the output to a separate bash function, but that's not\nimportant."),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"--json")," flag may also be good if you prefer the more compressed output from protostar commands."),(0,r.kt)("h3",{id:"python-script"},"Python script"),(0,r.kt)("p",null,"The main advantage of using the JSON format is that the user may automate protostar operations easily no matter what\nlanguages and technologies they use."),(0,r.kt)("p",null,"We can achieve the same result as above writing the equivalent python script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="automate_protostar_operations.py"',title:'"automate_protostar_operations.py"'},'import subprocess, json\n\n\ndef run_command(cmd):\n    out = subprocess.check_output(cmd.split(" "))\n    return out.decode("utf-8")\n\n\nprint("BUILD")\nrun_command("./protostar build")\nprint("TEST")\nrun_command("./protostar test")\nprint("DECLARE")\nout = run_command("./protostar declare hello_starknet --json")\nprint("DEPLOY")\nclass_hash = json.loads(out)[\'class_hash\']\nout = run_command(f"./protostar deploy {class_hash} --inputs 100 --json")\nprint("CALL")\ncontract_address = json.loads(out)[\'contract_address\']\nout = run_command(f"./protostar call --contract-address {contract_address} --function get_balance --json")\nprint(out)\n\nprint("DONE")\n')))}u.isMDXComponent=!0}}]);