"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8368],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,m=u["".concat(c,".").concat(d)]||u[d]||f[d]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6380:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var r=n(3117),o=(n(7294),n(3905));const a={},i="start_spoof",s={unversionedId:"cairo-1/testing/cheatcodes-reference/start_spoof",id:"cairo-1/testing/cheatcodes-reference/start_spoof",title:"start_spoof",description:"Changes TxInfo returned by gettxinfo() for the targeted contract until the spoof is stopped",source:"@site/docs/cairo-1/06-testing/cheatcodes-reference/start_spoof.md",sourceDirName:"cairo-1/06-testing/cheatcodes-reference",slug:"/cairo-1/testing/cheatcodes-reference/start_spoof",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_spoof",draft:!1,editUrl:"https://github.com/software-mansion/protostar/tree/master/website/docs/cairo-1/06-testing/cheatcodes-reference/start_spoof.md",tags:[],version:"current",frontMatter:{},sidebar:"cairo1",previous:{title:"start_roll",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_roll"},next:{title:"start_warp",permalink:"/protostar/docs/cairo-1/testing/cheatcodes-reference/start_warp"}},c={},l=[],p={toc:l};function f(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"start_spoof"},(0,o.kt)("inlineCode",{parentName:"h1"},"start_spoof")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cairo"},"fn start_spoof(contract_address: felt252, mock: TxInfoMock) nopanic;\n")),(0,o.kt)("p",null,"Changes ",(0,o.kt)("inlineCode",{parentName:"p"},"TxInfo")," returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"get_tx_info()")," for the targeted contract until the spoof is stopped\nwith ",(0,o.kt)("a",{parentName:"p",href:"/protostar/docs/cairo-1/testing/cheatcodes-reference/stop_spoof"},"stop_spoof"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"contract_address")," address of the contract for which ",(0,o.kt)("inlineCode",{parentName:"li"},"get_tx_info()")," result will be mocked."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TxInfoMock")," - a struct with same structure as ",(0,o.kt)("inlineCode",{parentName:"li"},"TxInfo")," (returned by ",(0,o.kt)("inlineCode",{parentName:"li"},"get_tx_info()"),"), ")),(0,o.kt)("p",null,"To mock the field of ",(0,o.kt)("inlineCode",{parentName:"p"},"TxInfo"),", set the corresponding field of ",(0,o.kt)("inlineCode",{parentName:"p"},"TxInfoMock")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(mocked_value)"),". Setting the field to ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," will use a default value - the field will not be mocked. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," will also cancel current mock for that field. See below for practical example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="TxInfoMock"',title:'"TxInfoMock"'},"struct TxInfoMock {\n    version: Option<felt252>,\n    account_contract_address: Option<felt252>,\n    max_fee: Option<u128>,\n    signature: Option<Array<felt252>>,\n    transaction_hash: Option<felt252>,\n    chain_id: Option<felt252>,\n    nonce: Option<felt252>,\n}\n\ntrait TxInfoMockTrait {\n    // Returns a default object initialized with Option::None for each field  \n    fn default() -> TxInfoMock;\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Contract example"',title:'"Contract','example"':!0},"#[contract]\nmod SimpleContract {\n    use box::BoxTrait;\n    use starknet::info::get_tx_info;\n\n    struct Storage {\n        stored_hash: felt252\n    }\n\n    #[external]\n    fn store_tx_hash() {\n        let tx_info = get_tx_info().unbox();\n        stored_hash::write(tx_info.transaction_hash);\n    }\n\n    #[view]\n    fn get_stored_tx_hash() -> felt252 {\n        stored_hash::read()\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cairo",metastring:'title="Test example"',title:'"Test','example"':!0},"use array::ArrayTrait;\nuse result::ResultTrait;\nuse cheatcodes::TxInfoMockTrait;\nuse option::OptionTrait;\n\n\n#[test]\nfn test_start_spoof() {\n    let contract_address = deploy_contract('simple', @ArrayTrait::new()).unwrap();\n    let version_before_mock = call(contract_address, 'get_transaction_version', @ArrayTrait::new()).unwrap();\n\n    // Change transaction_hash to 1234\n    // All other fields of `TxInfo` remain unchanged\n    let mut tx_info = TxInfoMockTrait::default();\n    tx_info.transaction_hash = Option::Some(1234);\n    start_spoof(contract_address, tx_info);\n\n    // Stores tx_hash in contract storage\n    invoke(contract_address, 'store_tx_hash', @ArrayTrait::new()).unwrap();\n    // Retrieve stored tx_hash\n    let return_data = call(contract_address, 'get_stored_tx_hash', @ArrayTrait::new()).unwrap();\n    assert(*return_data.at(0_u32) == 1234, *return_data.at(0_u32));\n\n    // Verify that only transaction_hash has been mocked\n    let return_data = call(contract_address, 'get_transaction_version', @ArrayTrait::new()).unwrap();\n    assert(*return_data.at(0_u32) == *version_before_mock.at(0_u32), *return_data.at(0_u32));\n}\n")))}f.isMDXComponent=!0}}]);